#version 330 core
out vec4 FragColor;  
in vec3 ourColor;
in vec3 normal;
in vec3 fragPos;

uniform vec3 cameraPos;
uniform vec3 lightPos;
uniform vec3 lightColor;

void main()
{
    vec3 ambient = lightColor * 0.1;

    vec3 norm = normalize(normal);
    vec3 lightDirection = normalize(lightPos - fragPos);
    float diffuseStrength = max(0.0f, dot(norm, lightDirection));
    vec3 diffuse = diffuseStrength * lightColor;

    vec3 reflectedLight = reflect(-lightDirection, norm);
    vec3 cameraDir = normalize(cameraPos - fragPos); 
    float spec = pow(max(0.0f, dot(reflectedLight, cameraDir)), 64);
    float specularStrength = 0.5;
    vec3 specular = specularStrength * spec * lightColor;

    vec3 fragColorRgb = (ambient + diffuse + specular) * ourColor;
    FragColor = vec4(fragColorRgb, 1.0f);
}